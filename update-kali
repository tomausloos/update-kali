#!/usr/bin/env python3
""" This script updates apt, go, pip and ruby packages. Run with --help for more information """

import os
import apt
import subprocess
import sys
import argparse
from updateactions import (
    print_message,
    elevate_privileges,
    take_ownership,
    update_packages,
    install_package,
    remove_package,
    pip_package_install,
    gem_package_install,
    install_golang_module,
    create_directory,
    remove_directory,
    sync_git_repo,
    run_scripts,
    update_pip_packages,
    update_gems,
    update_go_packages,
)
from config import (
    external_tools_directory_dns,
    external_tools_directory_mobile,
    external_tools_directory_infra,
    external_tools_directory_web,
    external_tools_directory_osint,
    external_tools_directory_utility,
    external_tools_directory,
    directories_to_remove,
    packages_to_install,
    packages_to_remove,
    pip_packages,
    gem_packages,
    golang_modules_to_install,
    ext_repositories_to_sync,
    ext_repositories_dns,
    ext_repositories_infra,
    ext_repositories_mobile,
    ext_repositories_osint,
    ext_repositories_utility,
    ext_repositories_web,
    golang_install_directory,
)


def main():
    argument_parser = argparse.ArgumentParser(
        description="update-kali is a tool for rapidly configuring Kali linux "
        + "with additional packages, git repositories and other tools, and "
        + "maintaining them over time."
    )
    argument_parser.add_argument(
        "-n",
        "--noupdate",
        help="Don't check for an updated script",
        action="store_true",
    )
    argument_parser.add_argument(
        "-s", "--noscripts", help="Don't run scripts", action="store_true"
    )
    argument_parser.add_argument(
        "-r", "--noreposync", help="Don't sync git repos", action="store_true"
    )
    argument_parser.add_argument(
        "-p",
        "--pip",
        help="Update all installed python pip packages",
        action="store_true",
    )
    argument_parser.add_argument(
        "-g",
        "--gems",
        help="Update all installed ruby gem packages",
        action="store_true",
    )
    argument_parser.add_argument(
        "-G", "--rebuildgo", help="Rebuild Go packages", action="store_true"
    )
    argument_parser.add_argument(
        "-f", "--full", help="Do all optional updates", action="store_true"
    )
    args = argument_parser.parse_args()

    # Run checks
    if not os.getenv("GOROOT"):
        print_message(
            "error", "GOROOT not set. Add 'export GOROOT=/usr/lib/go' to your .bashrc"
        )
    if not os.getenv("GOPATH"):
        print_message(
            "error", "GOPATH not set. Add 'export GOPATH=$HOME/go' to your .bashrc"
        )
    if elevate_privileges():
        sys.exit(1)

    # Sync the script with Github version
    if not args.noupdate:
        print_message("blue", "Syncing 'update-kali' script")
        script_git_status = subprocess.Popen(
            [
                "git",
                "-C",
                os.path.dirname(os.path.realpath(__file__)),
                "pull",
                "origin",
                "main",
            ],
            stdout=subprocess.PIPE,
        )
        script_git_status_output = script_git_status.communicate()[0]
        if "Already up to date" not in script_git_status_output.decode():
            print_message("error", "Script Updated. Please run the new version.\n")
            sys.exit(1)

    # Update and upgrade apt packages
    print_message("blue", "General Update")
    update_packages()

    # Install or remove specified apt packages
    print_message("blue", "Checking installed packages")
    apt_cache = apt.Cache()
    for package in packages_to_install:
        install_package(package, apt_cache)
    for package in packages_to_remove:
        remove_package(package, apt_cache)

    # Install python modules
    print_message("blue", "Checking python modules")
    installed_pip_packages = [
        r.decode().split("==")[0]
        for r in subprocess.check_output(
            [sys.executable, "-m", "pip", "freeze"]
        ).split()
    ]
    pip_package_install(pip_packages, installed_pip_packages)
    if args.pip or args.full:
        update_pip_packages()

    # Install gem packages
    if not os.path.exists("/usr/bin/gem"):
        print_message("error", "Rubygems not installed, skipping gem checks")
    else:
        print_message("blue", "Checking ruby gems")
        gemlist = subprocess.Popen(
            ["gem list | awk '{ print $1 }'"], shell=True, stdout=subprocess.PIPE
        ).stdout
        installed_gem_packages = gemlist.read().decode("utf-8").split("\n")
        gem_package_install(gem_packages, installed_gem_packages)
        if args.gems or args.full:
            update_gems()

    # Take ownership of the external tools directory
    opt_dirs = [
        external_tools_directory,
        external_tools_directory_utility,
        external_tools_directory_dns,
        external_tools_directory_infra,
        external_tools_directory_dns,
        external_tools_directory_osint,
        external_tools_directory_mobile,
    ]

    for d in opt_dirs:
        take_ownership(d)

    # Install golang tools
    if not os.path.exists("/usr/bin/go"):
        print_message("error", "Golang not installed, skipping go module checks")
    else:
        print_message("blue", "Checking golang modules")
        if not args.rebuildgo:
            for module in golang_modules_to_install:
                install_golang_module(module, golang_install_directory)
        if args.rebuildgo or args.full:
            update_go_packages(golang_modules_to_install, golang_install_directory)

    # Create and remove specified directories
    print_message("blue", "Checking directory structure")
    for d in opt_dirs:
        create_directory(d)
    for directory in directories_to_remove:
        remove_directory(directory)

    # Sync git repositories
    if not args.noreposync:
        print_message("blue", "Syncing git repositories")
        # for repo in personal_repositories_to_sync:
        #    sync_git_repo(repo, personal_repo_directory)
        for repo in ext_repositories_to_sync:
            sync_git_repo(repo, external_tools_directory)
        for repo in ext_repositories_dns:
            sync_git_repo(repo, external_tools_directory_dns)
        for repo in ext_repositories_infra:
            sync_git_repo(repo, external_tools_directory_infra)
        for repo in ext_repositories_mobile:
            sync_git_repo(repo, external_tools_directory_mobile)
        for repo in ext_repositories_utility:
            sync_git_repo(repo, external_tools_directory_utility)
        for repo in ext_repositories_web:
            sync_git_repo(repo, external_tools_directory_web)
        for repo in ext_repositories_osint:
            sync_git_repo(repo, external_tools_directory_osint)

    # Run *.sh and *.py files in the /scripts directory
    if not args.noscripts:
        print_message("blue", "Running scripts")
        run_scripts()

    print("\nAll done. Go break stuff.\n")


if __name__ == "__main__":
    main()
